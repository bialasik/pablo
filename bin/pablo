#!/usr/bin/env node

const fs = require('fs');
const package = require('./../package.json');
const path = require('path');
const program = require('commander');
const uuid = require('node-uuid');

const config = JSON.parse(fs.readFileSync(`${path.dirname()}/pablo.json`, 'utf-8'));

const isDirectory = (file) => fs.lstatSync(file).isDirectory();

const buildDirectoryObject = (context, file) => {
  return Object.assign({
    id: uuid.v4(),
    index: parseInt(file.split('.')[0], 10),
    name: file.split('.')[1]
  }, build(`${context}/${file}`, fs.readdirSync(`${context}/${file}`)));
};

const buildFileObject = (context, file) => {
  return {
    [file]: fs.readFileSync(`${context}/${file}`, 'utf-8')
  };
}

const flatten = (previous, current) => {
  return Object.assign({}, previous, current);
};

const build = (context, files) => {
  return {
    directory: files.filter((file) => isDirectory(`${context}/${file}`)).map((file) => buildDirectoryObject(context, file)),
    files: files.filter((file) => !isDirectory(`${context}/${file}`)).map((file) => buildFileObject(context, file)).reduce(flatten, {})
  };
};

const generate = (files) => {
  return build(`${config.context}`, files);
};

program
  .version(package.version)
  .command('start')
  .action(() => {
    fs.writeFile(`${__dirname}/../pablo.json`, JSON.stringify(generate(fs.readdirSync(`${config.context}`))), (err) => {
      if (err) throw err;
      console.log('Generated JSON');
    });
  })

program.parse(process.argv);
