#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const program = require('commander');
const junk = require('junk');

const pkg = require('./../package.json');

const INPUT_FILENAME = 'pablo.json';
const OUTPUT_FILENAME = 'pablo.json';

const config = JSON.parse(fs.readFileSync(`${path.dirname()}/${INPUT_FILENAME}`, 'utf-8'));
const root = config.context;

const build = (context) => {
  const currentDir = fs.readdirSync(context).filter(junk.not);
  const title = context.split('/').pop();

    return {
        title,
        content: currentDir.filter((dir) => dir === 'content').reduce((acc, dir) => {
            const nestedDir = fs.readdirSync(`${context}/${dir}`).filter(junk.not);
            return nestedDir.map((filename) => {
                return {
                    type: filename.split('.').pop(),
                    body: fs.readFileSync(`${context}/${dir}/${filename}`, 'utf-8')
                }
            });
        }, []),
        children: currentDir.filter((dir) => dir === 'children').reduce((acc, dir) => {
            const nestedDir = fs.readdirSync(`${context}/${dir}`).filter(junk.not);
            return nestedDir.map((filename) => {
                return build(`${context}/${dir}/${filename}`);
            });
        }, [])
    }
};

const generate = (context, dirs) => {
  return { content: dirs.filter(junk.not).map((dirname) => build(`${context}/${dirname}`)) };
};

program
  .version(pkg.version)
  .command('start')
  .action(() => {
    const pablo = Object.assign({
      absolute: path.resolve(path.dirname())
    }, config, generate(root, fs.readdirSync(root)));

    fs.writeFile(`${__dirname}/../${OUTPUT_FILENAME}`, JSON.stringify(pablo), (err) => {
      if (err) throw err;
      require('./../index')();
    });
  });

program.parse(process.argv);
